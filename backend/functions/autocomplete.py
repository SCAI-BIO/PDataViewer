import re

from repository.sqllite import SQLLiteRepository
from thefuzz import fuzz, process


def autocomplete(
    text: str, repo: SQLLiteRepository, threshold=80, limit=10
) -> list[str]:
    """Gives autocomplete suggestions based on the given query.

    Args:
        text (str): Query string input by the user for which autocomplete suggestions are needed.
        repo (SQLLiteRepository): SQLLiteRepository instance to interact with an SQL database containing a list of variables or options to match against.
        threshold (int, optional): The minimum similarity score (0-100) required for fuzzy matching suggestions.
            Defaults to 80.
        limit (int, optional): The maximum number of suggestions to return.
            Defaults to 10.

    Returns:
        list[str]: A list of up to `limit` autocomplete suggestions, sorted by:
            - Exact matches using prefix matching (if any exists, ordered by string length).
            - Fuzzy matches, prioritized by similarity score if prefix matches are insufficient.
    """
    # Remove special characters that have syntactic meaning in regex
    text = re.sub(r"[.*+?^${}()|[\]\\]", "", text)
    # Get variables and convert them into a list
    variables = repo.get_cdm(columns=["Feature"])
    variables.replace({"No total score.": ""}, inplace=True)
    variables = variables["Feature"].to_list()
    # Compile the regex pattern
    pattern = re.compile(r"^" + re.escape(text), re.IGNORECASE)
    # Perform regex pattern matching
    suggestions = [suggestion for suggestion in variables if pattern.match(suggestion)]
    # Limit the list of suggestions to a length of 10
    suggestions = suggestions[:10]
    # Sort the list elements in ascending order based in the length
    suggestions.sort(key=lambda s: len(s))

    # If there is no matching prefix
    if not suggestions:
        suggestions = process.extract(
            text, variables, scorer=fuzz.partial_token_set_ratio, limit=limit
        )
        suggestions = [
            suggestion[0] for suggestion in suggestions if suggestion[1] >= threshold
        ]

    # If there is less than 10 suggestions
    elif len(suggestions) < 10:
        # Calculate the number of suggestions that will be generated by fuzzy
        limit = limit - len(suggestions)
        # Remove already suggested variables  from the variables list
        suggestions_set = set(suggestions)
        variables = [feature for feature in variables if feature not in suggestions_set]
        # Generate fuzzy suggestions and populate suggestions list with it
        fuzzy_suggestions = process.extract(
            text, variables, scorer=fuzz.partial_token_set_ratio, limit=limit
        )
        # Filter fuzzy suggestions based on the threshold
        fuzzy_suggestions = [
            suggestion[0]
            for suggestion in fuzzy_suggestions
            if suggestion[1] >= threshold
        ]
        # Append fuzzy suggestions to the list of suggestions
        suggestions.extend(fuzzy_suggestions)

    return suggestions
